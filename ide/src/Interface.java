import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 *
 * @authors
 * José Manuel Alvarez García - CI 25038805
 * José Gregorio Castro Lazo - CI 24635907
 */

public class Interface extends javax.swing.JFrame {
    
    Image bitmapImage = null; 
    Image imgAux = null;
    Image originalImage = null;
    JFileChooser browsedFile = new JFileChooser();
    int degrees = 0;  
    int d = 0;
    boolean rotated = false;
    JLabel label = new JLabel("",SwingConstants.CENTER);
   
    public Interface() {
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        initComponents();
        jComboBox1.setLightWeightPopupEnabled(false);
        jSlider1.setVisible(false);
        jLabel2.setVisible(false);
        botonGuardar.setEnabled(false);
        botonInfo.setEnabled(false);
        originalButton.setEnabled(false);
        botonOperar.setEnabled(false);          
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonCargarImagen = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        botonGuardar = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        botonOperar = new javax.swing.JButton();
        jScrollPane1 = new java.awt.ScrollPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        redPane = new javax.swing.JTabbedPane();
        greenPane = new javax.swing.JTabbedPane();
        bluePane = new javax.swing.JTabbedPane();
        grayPane = new javax.swing.JTabbedPane();
        botonInfo = new javax.swing.JButton();
        originalButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tarea  #2 - José Alvarez - José Castro");

        botonCargarImagen.setText("Cargar Imagen");
        botonCargarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCargarImagenActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Negativo", "Espejo Horizontal", "Espejo Vertical", "Brillo", "Contraste", "Umbralizar", "Rotar", "Ecualizar", "Escalamiento", "Zoom" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        botonGuardar.setText("Guardar Imagen");
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });

        jSlider1.setMajorTickSpacing(30);
        jSlider1.setMaximum(255);
        jSlider1.setMinimum(-255);
        jSlider1.setMinorTickSpacing(30);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setToolTipText("");
        jSlider1.setValue(0);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        botonOperar.setText("Operar");
        botonOperar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOperarActionPerformed(evt);
            }
        });

        jTabbedPane1.addTab("Rojo", redPane);
        jTabbedPane1.addTab("Verde", greenPane);
        jTabbedPane1.addTab("Azul", bluePane);
        jTabbedPane1.addTab("Gris", grayPane);

        botonInfo.setText("Info");
        botonInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInfoActionPerformed(evt);
            }
        });

        originalButton.setText("Volver a la original");
        originalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                originalButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonOperar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(originalButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonCargarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(botonOperar)
                                .addComponent(botonGuardar)
                                .addComponent(botonInfo)
                                .addComponent(originalButton)))
                        .addGap(5, 5, 5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonCargarImagen)
                        .addGap(4, 4, 4))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonCargarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCargarImagenActionPerformed
        //Se carga la imagen examinándola desde un directorio
        bitmapImage = null;
        browsedFile.showOpenDialog(this);
        File file = browsedFile.getSelectedFile();    
        if (file != null) {
            String pathImageFile = file.getAbsolutePath();  
            try {           
                bitmapImage = processImage.loadImage(pathImageFile,label);
            } catch (FileNotFoundException ex) {}
            if (bitmapImage == null) {
                //Si la imagen cargada es corrupta o si se cargo algún otro archivo que no sea un bitmap de 1, 4, 8, 16 o 24 bits, se muestra un mensaje de error y los botones no pueden ser seleccionados
                jSlider1.setVisible(false);
                jLabel2.setVisible(false);
                botonGuardar.setEnabled(false);
                botonInfo.setEnabled(false);
                originalButton.setEnabled(false);
                botonOperar.setEnabled(false);
                label.setVisible(false);           
            } else {   
                //En caso contrario, se muestra la imagen y se activan los botones                
                degrees = 0;
                rotated = false;
                label.setIcon(new ImageIcon(bitmapImage));        
                label.setVisible(true);
                jScrollPane1.add(label); 
                botonGuardar.setEnabled(true);
                botonInfo.setEnabled(true);
                originalButton.setEnabled(true);
                botonOperar.setEnabled(true);
                imgAux = bitmapImage;                
            }
            if (bitmapImage != null) {
                originalImage = bitmapImage;
                BufferedImage image = processImage.toBufferedImage(originalImage); 
                //Se calcula la diagonal a la imagen original
                d = (int) Math.ceil(Math.sqrt(Math.pow(image.getWidth(),2)+Math.pow(image.getHeight(),2)));
                crearHistograma(bitmapImage);
            }         
        }
        
    }//GEN-LAST:event_botonCargarImagenActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        int saveValue = browsedFile.showSaveDialog(null);
        BufferedImage aux = processImage.toBufferedImage(bitmapImage);
        Image image = bitmapImage.getScaledInstance(aux.getWidth(), aux.getHeight(), Image.SCALE_SMOOTH);
        BufferedImage buffered = new BufferedImage(aux.getWidth(), aux.getHeight(), BufferedImage.TYPE_INT_RGB);
        buffered.getGraphics().drawImage(image, 0, 0 , null);
        if (saveValue == JFileChooser.APPROVE_OPTION) {
            try {
                ImageIO.write(buffered, "bmp", new File(browsedFile.getSelectedFile().getAbsolutePath()));
            } catch (IOException ex) {}
        }
    }//GEN-LAST:event_botonGuardarActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        jLabel2.setText(""+jSlider1.getValue());
    }//GEN-LAST:event_jSlider1StateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        int opcion = jComboBox1.getSelectedIndex();
        switch (opcion)
        {
            case 0: jSlider1.setVisible(false);
                    jLabel2.setVisible(false);
                    
            break;
                
            case 1: jSlider1.setVisible(false);
                    jLabel2.setVisible(false);
            break;
                    
            case 2: jSlider1.setVisible(false);
                    jLabel2.setVisible(false);
            break;
                
            case 5: jSlider1.setMinimum(0);
                    jSlider1.setValue(0);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
            break;
                
            case 8: jSlider1.setVisible(false);
                    jLabel2.setVisible(false);
            break;
            
            case 7: jSlider1.setVisible(false);
                    jLabel2.setVisible(false);
            break;
            
            case 9: jSlider1.setMinimum(1);
                    jSlider1.setMaximum(300);
                    jSlider1.setValue(100);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
                    
            break;
            
            case 6: jSlider1.setMinimum(-360);
                    jSlider1.setMaximum(360);
                    jSlider1.setValue(0);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
            break;
            
            default:jSlider1.setMinimum(-255);
                    jSlider1.setValue(0);
                    jSlider1.setVisible(true);
                    jLabel2.setVisible(true);
            break;
                
        }
           
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void botonOperarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOperarActionPerformed
        int opcion = jComboBox1.getSelectedIndex();
        switch (opcion)
        {
            case 0:
                if (bitmapImage != null) {
                    if (!rotated) {
                        bitmapImage = processImage.invertImage(processImage.toBufferedImage(imgAux));
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.invertImage(processImage.toBufferedImage(imgAux));
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;
                
            case 1:
                if (bitmapImage != null) {
                    if (!rotated) {
                        bitmapImage = processImage.horizontalFlip(processImage.toBufferedImage(imgAux));
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.horizontalFlip(processImage.toBufferedImage(imgAux));
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;
                
            case 2:
                if (bitmapImage != null) {
                    if (!rotated) {
                        bitmapImage = processImage.verticalFlip(processImage.toBufferedImage(imgAux));
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.verticalFlip(processImage.toBufferedImage(imgAux));
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;
                
            case 3:
                if (bitmapImage != null) {                    
                    if (!rotated) {
                        try {
                            bitmapImage = processImage.brightness(processImage.toBufferedImage(imgAux), jSlider1.getValue());
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        try {
                            imgAux = processImage.brightness(processImage.toBufferedImage(imgAux), jSlider1.getValue());
                        } catch (IOException ex) {
                            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }  
            break;
                
            case 4:
                if (bitmapImage != null) {
                    if (!rotated) {
                        bitmapImage = processImage.contrast(processImage.toBufferedImage(imgAux),jSlider1.getValue());
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.contrast(processImage.toBufferedImage(imgAux),jSlider1.getValue());
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;
                
            case 5:
                if (bitmapImage != null) {
                    if (!rotated) {
                        bitmapImage = processImage.umbralize(processImage.toBufferedImage(imgAux),jSlider1.getValue());
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);   
                    } else {
                        imgAux = processImage.umbralize(processImage.toBufferedImage(imgAux),jSlider1.getValue());
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);                        
                    }
                }
            break;
                
            case 6:
                if (bitmapImage != null) {
                    rotated = true;
                    degrees += jSlider1.getValue(); 
                    if (degrees >= 360) degrees -= 360;
                    if (degrees <= -360) degrees += 360;
                    bitmapImage = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                    label.setIcon(new ImageIcon(bitmapImage));                    
                    jScrollPane1.add(label); 
                    crearHistograma(imgAux);
                }
            break;
            
            case 7:
                if (bitmapImage != null) {   
                    if (!rotated) {
                        bitmapImage = processImage.histogramEqualization(processImage.toBufferedImage(imgAux));
                        imgAux = bitmapImage;
                        crearHistograma(bitmapImage);
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);                        
                        int [][] histMatrix = DibujarHistograma.histograma(processImage.toBufferedImage(bitmapImage));
                        try {
                            DibujarHistograma.crearHistograma(histMatrix[0], redPane, Color.RED);
                            DibujarHistograma.crearHistograma(histMatrix[1], greenPane, Color.GREEN);
                            DibujarHistograma.crearHistograma(histMatrix[2], bluePane, Color.BLUE);
                            DibujarHistograma.crearHistograma(histMatrix[4], grayPane, Color.BLACK);
                        } catch (IOException ex) {
                        }
                    } else {
                        imgAux = processImage.histogramEqualization(processImage.toBufferedImage(imgAux));
                        BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                        crearHistograma(imgAux);
                        label.setIcon(new ImageIcon(aux));
                        jScrollPane1.add(label);     
                        int [][] histMatrix = DibujarHistograma.histograma(processImage.toBufferedImage(imgAux));
                        try {
                            DibujarHistograma.crearHistograma(histMatrix[0], redPane, Color.RED);
                            DibujarHistograma.crearHistograma(histMatrix[1], greenPane, Color.GREEN);
                            DibujarHistograma.crearHistograma(histMatrix[2], bluePane, Color.BLUE);
                            DibujarHistograma.crearHistograma(histMatrix[4], grayPane, Color.BLACK);
                        } catch (IOException ex) {
                        }
                    }
                }
            break;

            case 8:
                if (bitmapImage != null) {
                    try {
                        int ancho = Integer.parseInt(JOptionPane.showInputDialog(null,"Introduzca el ancho: ","Ancho",JOptionPane.DEFAULT_OPTION));
                        int alto = Integer.parseInt(JOptionPane.showInputDialog(null,"Introduzca el alto: ","Alto",JOptionPane.DEFAULT_OPTION));
                        BufferedImage aux = processImage.toBufferedImage(bitmapImage);
                        int M = aux.getWidth();
                        int N = aux.getHeight();
                        int[] pixels = new int[N*M];
                        int indice = 0;
                        for (int i=0;i<N;i++) {
                            for (int j=0;j<M;j++) {
                                pixels[indice] = aux.getRGB(j, i);
                                indice++;
                            }
                        }
                        int[] res = processImage.escalamiento(pixels,M,N,ancho,alto,false);
                        d = (int) Math.ceil(Math.sqrt(Math.pow(ancho,2)+Math.pow(alto,2)));
                        BufferedImage salida = new BufferedImage(ancho, alto, BufferedImage.TYPE_INT_RGB);
                        indice = 0;
                        for (int i=0;i<alto;i++) {
                            for (int j=0;j<ancho;j++) {
                                salida.setRGB(j, i, res[indice]);
                                indice++;
                            }
                        } 
                        bitmapImage = salida;
                        if (!rotated) imgAux = bitmapImage;
                        else {
                            aux = processImage.toBufferedImage(imgAux);
                            M = aux.getWidth();
                            N = aux.getHeight();
                            pixels = new int[N*M];
                            indice = 0;
                            for (int i=0;i<N;i++) {
                               for (int j=0;j<M;j++) {
                                   pixels[indice] = aux.getRGB(j, i);
                                   indice++;
                               }
                            }
                            res = processImage.escalamiento(pixels,M,N,ancho,alto,false);
                            d = (int) Math.ceil(Math.sqrt(Math.pow(ancho,2)+Math.pow(alto,2)));
                            salida = new BufferedImage(ancho, alto, BufferedImage.TYPE_INT_RGB);
                            indice = 0;
                            for (int i=0;i<alto;i++) {
                               for (int j=0;j<ancho;j++) {
                                   salida.setRGB(j, i, res[indice]);
                                   indice++;
                               }
                            }
                            imgAux = salida;
                            bitmapImage = processImage.rotate(processImage.toBufferedImage(salida), degrees, d);
                        }
                        label.setIcon(new ImageIcon(bitmapImage));
                        jScrollPane1.add(label);
                        if (!rotated) crearHistograma(bitmapImage);
                        else crearHistograma(imgAux);
                    } catch(Exception e){
                        JOptionPane.showMessageDialog(null, "Error: Datos Inválidos","Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            break;
                
            case 9:
                if (bitmapImage != null) {
                    BufferedImage aux = processImage.rotate(processImage.toBufferedImage(imgAux), degrees, d);
                    int M = aux.getWidth();
                    int N = aux.getHeight();
                    int[] pixels = new int[N*M];
                    int indice = 0;
                    for (int i=0;i<N;i++) {
                        for (int j=0;j<M;j++) {
                            pixels[indice] = aux.getRGB(j, i);
                            indice++;
                        }
                    }                  
                    int N2 = N*jSlider1.getValue()/100;
                    int M2 = M*jSlider1.getValue()/100;
                    int[] res = processImage.escalamiento(pixels,M,N,M2,N2,true);
                    if (N2 <= 1 || M2 <= 1) N2 = M2 = 1; 
                    BufferedImage salida = new BufferedImage(M2, N2, BufferedImage.TYPE_INT_RGB);
                    indice = 0;
                    for (int i=0;i<N2;i++) {
                        for (int j=0;j<M2;j++) {
                            salida.setRGB(j, i, res[indice]);
                            indice++;
                        }
                    }
                    label.setIcon(new ImageIcon(salida));
                    jScrollPane1.add(label);                    
                }
            break;                  
        }             
    }//GEN-LAST:event_botonOperarActionPerformed

    private void botonInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInfoActionPerformed
        processImage.mostrarInfo();
    }//GEN-LAST:event_botonInfoActionPerformed

    private void originalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_originalButtonActionPerformed
        bitmapImage = originalImage;
        imgAux = originalImage;
        BufferedImage image = processImage.toBufferedImage(originalImage); 
        //Se calcula la diagonal a la imagen original
        d = (int) Math.ceil(Math.sqrt(Math.pow(image.getWidth(),2)+Math.pow(image.getHeight(),2)));
        rotated = false;
        processImage.setHeight(processImage.toBufferedImage(originalImage).getHeight() );
        processImage.setWidth(processImage.toBufferedImage(originalImage).getWidth() );
        label.setIcon(new ImageIcon(originalImage));
        jScrollPane1.add(label); 
        degrees = 0;
        crearHistograma(bitmapImage);
    }//GEN-LAST:event_originalButtonActionPerformed

    public void crearHistograma(Image I) 
    {
        int [][] histMatrix = DibujarHistograma.histograma(processImage.toBufferedImage(I));
        try {
            DibujarHistograma.crearHistograma(histMatrix[0], redPane, Color.RED);
            DibujarHistograma.crearHistograma(histMatrix[1], greenPane, Color.GREEN);
            DibujarHistograma.crearHistograma(histMatrix[2], bluePane, Color.BLUE);
            DibujarHistograma.crearHistograma(histMatrix[4], grayPane, Color.BLACK);
        } catch (IOException ex) {}
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane bluePane;
    private javax.swing.JButton botonCargarImagen;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonInfo;
    private javax.swing.JButton botonOperar;
    private javax.swing.JTabbedPane grayPane;
    private javax.swing.JTabbedPane greenPane;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel2;
    private java.awt.ScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton originalButton;
    private javax.swing.JTabbedPane redPane;
    // End of variables declaration//GEN-END:variables
}
